<!-- TODO move styles elsewhere-->
<style>
  #icon-choices {}
  #icon-choices .glyphicon {
    float: left;
    display:inline-block;
    margin:3vw;
    font-size:6.25vw;
  }
  .selected {
    color:lightgreen;
  }
  .half-hour-slot {
    width:100%;
    height:100%;
  }

</style>




<main id="timeline">
  
  <%if session[:user_id]%>

    <!-- timeline -->
    <%= render "home/timeline" %>
  <%else%>

    <!-- Describe what Timekeep is about -->

    <h3>Time is money; track your spending.</h3>

    <p>Timekeep is a web app that helps you track how you spend your time. It is primarily a mobile web app because in this day and age, everyone is always on their phones. Periodically note what you've done in the past hour or two, and be honest: how much of that time did you spend surfing the web? Be honest and write that down in Timekeep. As you use Timekeep more and more, you'll become more mindful of your time-spending habits and become more aware when you are goofing off. Time is money; track your spending.</p>

    <h3>You are not logged in:
      <br> Go to <a href="/settings"><span class="glyphicon glyphicon-cog"></span></a> to sign up or log in!
    </h3>

  <%end%>


  <!-- hidden new entry modal -->
  <%= render 'home/modal_partials/new_entry' %>

  <!-- hidden new category modal -->
  <%= render 'home/modal_partials/new_category' %>

</main>






<!-- TODO move script elsewhere-->
<script>
  var timeSlotStart,
      timeSlotEnd; 


  $(document).ready(function(){
    var newEntryForm = $('#new-entry-form'),
        newEntryModal = $('#new-entry');



    /* event listener: NEW ENTRY MODAL */
    $('.hour').on('click', function(){
      var hourSlot = this;
      setUpModal(hourSlot, "1::00", newEntryModal);
    });

    /* event listener: submitting new entry form */
    var submitBtn = $('#new-entry-submit');
    $('#new-entry-submit').on('click', function(){
      updateEntryForm(false, 0, newEntryForm);
    });


    /* event listener: NEW CATEGORY MODAL */
    $('#new-category-btn').on('click', function(){
      newEntryModal.modal('toggle');
      $('#new-category').modal('toggle');

    });


    /* start scrolled depending on current time */
    setScrollStart();


    /* show the activities on the timeline for today */
    var sessionId = $('#session-id').val();
    $.ajax('/users/' + sessionId + '/data_hash', {
      success: function(data) {
        var nowDate = new Date()
        console.log('ajax succeeded');
        dataHash = data;     
           
        setUpTimeline();
      },
      error: function(){
        console.log('ajax failed');
      }
    });

  });

  
  /*this funciton takes inputs and then returns the start and endtime */
  function getEntryDuration(startHour, startMinute, durationHHMM){


    var starttimeSlot = startHour + ":" + startMinute,

        duration = durationHHMM, // "1::30" = 1 hour 30 mins
        durationHour = duration.split('::')[0],
        durationMinute = duration.split('::')[1],

        endtimeHour,
        endtimeMinute,
        endtimeSlot;

    endtimeHour = parseInt(startHour) + parseInt(durationHour);
    
    endtimeMinute = parseInt(startMinute) + parseInt(durationMinute);
    if (parseInt(endtimeMinute) >= 60) {
      endtimeHour += 1;
      endtimeMinute -= 60;
    }

    

    if (parseInt(endtimeHour) > 23) {
      endtimeHour = "23";
    } else if (endtimeHour.toString().length === 1) {
      endtimeHour = "0" + endtimeHour;
    }

    if (endtimeMinute.toString().length === 1) {
      endtimeMinute += "0";
    }
    endtimeSlot = endtimeHour + ":" + endtimeMinute;


    return {
      "starttime": starttimeSlot,
      "endtime": endtimeSlot
     }
  }

  Date.prototype.toDateInputValue = (function() {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0,10);
  });

  function updateEntryForm(isPut, entryId, newEntryForm) {
   var categoryId = $('select[name="category_id"]').val(),
        formAction = newEntryForm.attr('action'),
        formAction = formAction.split('categories/')[0];
        formAction += 'categories/' + categoryId + '/entries';
    
    if (isPut) { //if it is updating
      var putInput = '<input type="hidden" name="_method" value="PUT">';
      newEntryForm.append(putInput);
      formAction += '/' + entryId;
    }

    newEntryForm.attr('action', formAction);
    newEntryForm.submit();
  }

  function setUpModal(hourSlot, defaultDuration, modal) {
    var startHour = hourSlot.id.split('-')[1],
        startMinute = "00", 
        duration = defaultDuration;

    // Autopopulate [starttime, endtime, entry_date]
    var durations = getEntryDuration(startHour, startMinute, duration);
    $('input[name="starttime"]').val(durations['starttime']);
    $('input[name="endtime"]').val(durations['endtime']);
    $('input[name="entry_date"]').val( new Date().toDateInputValue() );

    modal.modal('toggle');
  }

  function setScrollStart(){
    var timeNow = new Date().getHours();

    if (timeNow < 7) {
      window.scrollTo(0, 0);
    } else if (timeNow < 15) {
      window.scrollTo(0, 400);
    } else {
      window.scrollTo(0, 800);
    }
  }
  
  function formatDate(date){  
    var dd = date.getDate(),
        mm = date.getMonth() + 1,
        yyyy = date.getFullYear();
    if(dd < 10) {
      dd = '0' + dd
    }
    if(mm < 10) {
      mm = '0' + mm
    }
    date = yyyy + '-' + mm + '-' + dd;
    return date;
  }     

  function setUpTimeline(){
    var date = formatDate( new Date() ),
        datesCatsAndEntries = getDatesCatsAndEntries(date),
        datesCatsAndEntriesLength = datesCatsAndEntries.length;

    var approximateTime = function(time) {
      var hr = parseInt( time.split(':')[0] ),
          mins = parseInt( time.split(':')[1] ),
          newHr = hr,
          newMins,
          newTime;

      if (mins < 15) {
        newMins = "00";
      } else if (mins < 45) {
        newMins = "30";
      } else {
        newMins = "00";
        newHr += 1;
      }

      newHr = newHr.toString();

      if (newHr.length < 2) {
        newHr = "0" + newHr;
      }

      //TODO: what to do if the hour is 24:00
      
      return newHr + ':' + newMins;
    };

    var makeTimelineEvent = function(actualStart, actualEnd, entryId, entryDate, entrysCatId, entrysCatName, entrysCatColor, entrysCatIcon){
      


      var addStyleToSlot = function(slot) {
        var thisSlot = $(slot);
         /* aesthetics: adding color to each half-hour slot */
         thisSlot.css('background-color', entrysCatColor);

        var thisTime = thisSlot.parent().find('h6'), // add glyphicon
            catIconEl = '<span class="glyphicon glyphicon-' + thisSlot.data('category-icon') + '"></span>';
        
        // /* if there is color and no glyphicon add glyphicon */
        if (thisTime.find('span.glyphicon').length === 0) {
          if (thisTime.parent().css('background-color') !== "rgba(0, 0, 0, 0)") {
            thisTime.html( catIconEl + thisTime.html() + catIconEl );
            
          }
        }
      };



      var addDataToSlot = function(slot) {
        var thisSlot = $(slot);


        thisSlot.data('entry-id', entryId)
                .data('entry-date', entryDate)
                .data('starttime', actualStart)
                .data('endtime', actualEnd)
                .data('category-id', entrysCatId)
                .data('category-name', entrysCatName)
                .data('category-color', entrysCatColor)
                .data('category-icon', entrysCatIcon);

        /* unbind modal event from the hour */
        thisSlot.parent().unbind('click');

        /* add event listener to prepopulate modal that will come up */
        thisSlot.on('click', function (){
          var newEntryForm = $('#new-entry-form'),
              newEntryModal = $('#new-entry'),
              thisSlotData = $(this).data();
              
          $('input[name="starttime"]').val( thisSlotData['starttime'] );
          $('input[name="endtime"]').val( thisSlotData['endtime'] );
          $('input[name="entry_date"]').val( thisSlotData['entryDate'] );
          $('select[name="category_id"]').val( thisSlotData['categoryId'] ); 


          $('#new-entry-submit').unbind()
                                .on('click', function(){
            updateEntryForm(true, thisSlotData['entryId'], newEntryForm);
          });
          
          newEntryModal.modal('show');
        });
        
      };




      /* loop through all hour slots */
      var startFillingInSlots = false,
          halfHrSlot = $('.half-hour'),
          halfHrSlotLength = halfHrSlot.length,
          approxStart = approximateTime(actualStart),
          approxEnd = approximateTime(actualEnd);

      for (var n = 0; n < halfHrSlotLength; n++){
        var time = $(halfHrSlot[n]).attr('data-time'), // "03:00"
            hour = time.split(':')[0],
            thisSlot = $(halfHrSlot[n]);

        /* when ending point is found, turn off filling in slots */
        if (hour === approxEnd.split(':')[0]) {
          startFillingInSlots = false;

          if ('30' === approxEnd.split(':')[1]) { // :30 min
            addDataToSlot(thisSlot);
            addStyleToSlot(thisSlot);
            break;
          } 
        }

        /* once start time found, keep filling in color and attaching data to elements until ending slot done*/
        if (startFillingInSlots) {
          addDataToSlot(thisSlot);
          
          addStyleToSlot(thisSlot);
          
        }

        /* if the entry start time is equal to the hour in the timeline, then do the following */
        if (hour === approxStart.split(':')[0]) {
          startFillingInSlots = true;

          if ('00' === approxStart.split(':')[1]) { // :00 min
            addDataToSlot(thisSlot);
            addStyleToSlot(thisSlot);
            
          } 
        }

      }
    }

    /* loop through categories */
    for (var i = 0; i < datesCatsAndEntriesLength; i++) {

      // loop through entries of the category from datesCatsAndEntries
      var entries = datesCatsAndEntries[i]['entries'],
          entriesLength = datesCatsAndEntries[i]['entries'].length;

      for (var t = 0; t < entriesLength; t++) {
        var thisEntry = entries[t],
            actualStart = thisEntry['starttime'].split('T')[1].substring(0, 5),
            actualEnd = thisEntry['endtime'].split('T')[1].substring(0, 5),
            entryId = thisEntry['entry_id'],
            entryDate = thisEntry['entry_date'],
            entrysCatName = datesCatsAndEntries[i]['name'],
            entrysCatColor = datesCatsAndEntries[i]['color'],
            entrysCatIcon = datesCatsAndEntries[i]['icon'],
            entrysCatId = datesCatsAndEntries[i]['id'];
                  

        /* then create the time slot objects */
        makeTimelineEvent(actualStart, actualEnd, entryId, entryDate, entrysCatId, entrysCatName, entrysCatColor, entrysCatIcon);
        
      }    
    }
  }

  /*gets categories and entries based on date */
  function getDatesCatsAndEntries(thisDate){

    var catsAndEntries = [];
    //Loop through categories
    for (var cat in dataHash) {
      
      var thisCategory = {
        'id': dataHash[cat]['id'],
        'name': cat,
        'color': dataHash[cat]['color'],
        'icon': dataHash[cat]['icon'],
        'entries': []
      };
      //loop through entries in categories
      for (var entry in dataHash[cat]['entries']) {
        var thisEntry = dataHash[cat]['entries'][entry];
        
        //if the date is today's date, insert into array
        if (thisEntry['entry_date'] === thisDate) {
          thisCategory['entries'].push(thisEntry);
        }
      }
      //if the category's entries is greater than zero, insert, else don't.
      if (thisCategory['entries'].length > 0) {
        catsAndEntries.push(thisCategory);
      }
    }
    return catsAndEntries;
  }


</script>


