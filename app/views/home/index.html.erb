<!-- TODO move styles elsewhere-->
<style>
  #icon-choices {}
  #icon-choices .glyphicon {
    float: left;
    display:inline-block;
    margin:3vw;
    font-size:6.25vw;
  }
  .selected {
    color:lightgreen;
  }

/*  #timeline {
    height:70vh;
    width:90vw;
    border:1vw solid darkgrey;
    overflow: scroll;
  }*/
</style>




<main id="timeline">
  
  <%if session[:user_id]%>

    <!-- timeline -->
    <%= render "home/timeline" %>
  <%else%>

    <!-- Describe what Timekeep is about -->

    <h3>Time is money; track your spending.</h3>

    <p>Timekeep is a web app that helps you track how you spend your time. It is primarily a mobile web app because in this day and age, everyone is always on their phones. Periodically note what you've done in the past hour or two, and be honest: how much of that time did you spend surfing the web? Be honest and write that down in Timekeep. As you use Timekeep more and more, you'll become more mindful of your time-spending habits and become more aware when you are goofing off. Time is money; track your spending.</p>

    <h3>You are not logged in: click on settings on the top right to sign up or log in!</h3>

  <%end%>


  <!-- hidden new entry modal -->
  <%= render 'home/modal_partials/new_entry' %>

  <!-- hidden new category modal -->
  <%= render 'home/modal_partials/new_category' %>

</main>







<!-- TODO move script elsewhere-->
<script>
  var timeSlotStart,
      timeSlotEnd; //used to set default time




  /*this funciton takes inputs and then returns the start and endtime */
  function getEntryDuration(startHour, startMinute, durationHHMM){


    var starttimeSlot = startHour + ":" + startMinute;


    var duration = durationHHMM, // "1::30" = 1 hour 30 mins
        durationHour = duration.split('::')[0],
        durationMinute = duration.split('::')[1];


    var endtimeHour,
        endtimeMinute,
        endtimeSlot;

    endtimeHour = parseInt(startHour) + parseInt(durationHour);
    
    endtimeMinute = parseInt(startMinute) + parseInt(durationMinute);
    if (parseInt(endtimeMinute) >= 60) {
      endtimeHour += 1;
      endtimeMinute -= 60;
    }

    

    if (parseInt(endtimeHour) > 23) {
      endtimeHour = "23";
    } else if (endtimeHour.toString().length === 1) {
      endtimeHour = "0" + endtimeHour;
    }

    if (endtimeMinute.toString().length === 1) {
      endtimeMinute += "0";
    }
    endtimeSlot = endtimeHour + ":" + endtimeMinute;


    return {
      "starttime": starttimeSlot,
      "endtime": endtimeSlot
     }
  }

  Date.prototype.toDateInputValue = (function() {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0,10);
  });


  $(document).ready(function(){
    var newEntryForm = $('#new-entry-form'),
        newEntryModal = $('#new-entry');

    /* event listener: NEW ENTRY MODAL */
    $('.hour').on('click', function(){

      var startHour = this.id.split('-')[1],
          startMinute = "00", //TODO make this customisable later
          duration = "1::30";

      // Autopopulate [starttime, endtime, entry_date]
      var durations = getEntryDuration(startHour, startMinute, duration);
      $('input[name="starttime"]').val(durations['starttime']);
      $('input[name="endtime"]').val(durations['endtime']);
      $('input[name="entry_date"]').val( new Date().toDateInputValue() );

      newEntryModal.modal('toggle');
    });

    /* event listener: submitting new entry form */
    $('#new-entry-submit').on('click', function(){
      var categoryId = $('select[name="category_id"]').val(),
          formAction = newEntryForm.attr('action'),
          formAction = formAction.split('categories/')[0];
          formAction += 'categories/' + categoryId + '/entries';


      newEntryForm.attr('action', formAction);
      newEntryForm.submit();
    });


    /* event listener: NEW CATEGORY MODAL */
    $('#new-category-btn').on('click', function(){
      newEntryModal.modal('toggle');
      $('#new-category').modal('toggle');

    });


    /* start scrolled depending on current time */
    setScrollStart();


    /* show the activities on the timeline for today */
    var sessionId = $('#session-id').val();
    $.ajax('/users/' + sessionId + '/data_hash', {
      success: function(data) {
        var nowDate = new Date()
        console.log('ajax succeeded');
        dataHash = data;     
           
        setUpTimeline();
      },
      error: function(){
        console.log('ajax failed');
      }
    });

  });

  function setScrollStart(){
    var timeNow = new Date().getHours();

    if (timeNow < 7) {
      window.scrollTo(0, 0);
    } else if (timeNow < 15) {
      window.scrollTo(0, 400);
    } else {
      window.scrollTo(0, 800);
    }
  }

  
    
    
  
  
  function formatDate(date){  
    var dd = date.getDate(),
        mm = date.getMonth() + 1,
        yyyy = date.getFullYear();
    if(dd < 10) {
      dd = '0' + dd
    }
    if(mm < 10) {
      mm = '0' + mm
    }
    date = yyyy + '-' + mm + '-' + dd;
    return date;
  }     

  function setUpTimeline(){
    var date = formatDate( new Date() ),
        datesCatsAndEntries = getDatesCatsAndEntries(date);

        // debugger


  }

  /*gets categories and entries based on date */
  function getDatesCatsAndEntries(thisDate){
    var catsAndEntries = [];
    //Loop through categories
    for (var cat in dataHash) {
      var thisCategory = {
        'name': dataHash[cat]['name'],
        'color': dataHash[cat]['color'],
        'icon': dataHash[cat]['icon'],
        'entries': []
      };
      //loop through entries in categories
      for (var entry in dataHash[cat]['entries']) {
        var thisEntry = dataHash[cat]['entries'][entry];
        
        //if the date is today's date, insert into array
        if (thisEntry['entry_date'] === thisDate) {
          thisCategory['entries'].push(thisEntry);
        }
      }
      //if the category's entries is greater than zero, insert, else don't.
      if (thisCategory['entries'].length > 0) {
        catsAndEntries.push(thisCategory);
      }
    }
    return catsAndEntries;
  }


</script>


